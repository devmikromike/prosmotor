<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use App\Models\Prospect;
use App\Models\ProsDetails;
use App\Models\ProsBlackListed;
use App\Models\Location;

class Search extends Model
{
    use HasFactory;

    protected $guared = [];

    public function perName($name)
    {
        if($response = Http::get('http://proscore-api.test/SearchByName/'.$name)){

        //  dd($response->json());

          $results = SELF::statusData($response);
            $data =  $results;
              $round = '2';
              SELF::extractJson($data, $round);

               dd($results);


              if($results['Status'] !== 200 )
              {
                dd($results['Status']);

                $statusMsg =  $results['Status_message'];

                return $statusMsg;
              }
                return 'Completed perName Process...';
        }
   }
    public function perVatID($vatId)
    {
      if($response = Http::get('http://proscore-api.test/SearchVatID/'.$vatId)){
          $results = SELF::statusData($response);
              $data =  $results;
              $round = '2';
              SELF::extractJson($data);
              return $data;
        }
    }
    public function perDates($from, $to)
    {
      if($response = Http::get('http://proscore-api.test/SearchByDates/'.$from .'/' .$to))
        {
          $results = SELF::statusData($response);
            $data =  $results;
            $round = '1';
            SELF::roundOne($round, $data);

            return 'Completed Process';
           }
    }
    public function extractJson($data)
    {
  //    dump ("Extract Data ....round: " .$round);
      $status = '';
      $message = '';
      $vatId = '';
      $liquidations = array();
      $businessLines = array();

      $next = $data;

      $results =  Arr::exists($next, 'results');
      $aux =  Arr::exists($next, 'auxiliaryNames');
      $liq =  Arr::exists($next, 'liquidations');

      if ($results == 'true'){

               if(!empty($liquidations)){
        //         dump ("Liquidations data. "  );
                 $status = 'failed';
                 $details = $next['liquidations'][0];
                 $business['lastType'] = $liquidations[0]['type'];
                 $business['regDate'] = $liquidations[0]['registrationDate'];
                 $business['vatId'] = $next['businessId'];
                 $reason = $liquidations[0]['description'];
                 $response = ProsBlackListed::createStatus($business, $reason);
               } else {
          //        dump ("Sending Location data. "  );
        $location = Location::extractLocation($data);
                /*   dump ( $results); = true
                *    dump ($aux);   = false
                    dump ( $liq );  = false      */
               }

             $businessLines = $data['results'][0]['businessLines'];
          //    dump ("Saving businessLines data. "  );
              ProsBssLine::saveBss($businessLines);
              return 'true';
        } // end of results
  return 'false';
  }    // end of function

/*



            }else {
              if(empty($liquidations))
              {
                $type = 'name-id-search';
                $pros =  Search::json($data,$type);
                $message = $pros[1]['message'];
                $status = 'OK';

                // dd($pros[1]['company_id']);

                $id = $pros[1]['company_id'];
                $addresses = $next['addresses'];

                  if (Arr::exists($next, 'addresses')){

                  //  dd ($next['addresses']);

                      if(!empty($addresses))
                      {
                        $loc =  Location::createLocation($id, $addresses);
                      }else{
                        echo "addresses are empty";
                        return 'null';
                      }
                    }
              }
            }
        }
      }
    }
    */
      // List Search ; 1st round.
      /* if ($round_two === 1)
      {
        $next = $data['results'];

        dd($data['results']);

        $type = 'list-search';
        echo "List-search......";
        echo "************** --> ";
        $pros = Search::json($data, $type);
        echo ".*****************";
      } */


/*

      $contactDetails = [];
      $registeredEntries = [];
      $businessIdChanges = [];

      $contactDetails = $result['contactDetails'];
      $registeredEntries = $result['registeredEntries'];
      $businessIdChanges = $result['businessIdChanges'];


      foreach ($data as $result){

        $company['name'] = $result['name'];
        $company['vatId'] = $result['businessId'];
        $company['registrationDate'] = $result['registrationDate'];
        $uri = $result['detailsUri'];

        $names = $result['names'];
        $auxiliaryNames = $result['auxiliaryNames'];
        $companyForms = $result['companyForms'];
        $businessLines = $result['businessLines'];
        $languages = $result['languages'];


        // check if CompanyName is empty!.
        Prospect::emptyCompanyName($company, $uri);

      //  $pros = Prospect::collectCompanyData($company);
      //  $id = $pros->id;
      //  ProsDetails::saveUri($detailsUri, $id);
      }

      return $pros = 'Out of ForEach Loop';
*/


    public function json($data, $type)
    { }
      /*
        dd($type, $data);

          if($type === 'name-id-search'){
/*
            $pros = new Search::class;

            $pros->nameIdSearch($company, $uri);
            }else {

            } */

      //    Search::listSearch();
  //  }
  /*      if($type === 'name-id-search'){

            echo "Round 2: name-id-search";

            $response = Prospect::emptyCompanyName($company, $uri);
            }elseif($type === 'list-search'){
                   echo "Processing search Data Round one...";
                     $response = Prospect::emptyCompanyName($company, $uri);
                   echo $company['vatId'];
                   echo "company data created";

                     $vatID = $data['businessId'];
                     $round_two = '2';
                    echo "Processing Data Round 2 ...";
                    Search::perVatID($vatID, $round_two);
              }
          echo "Foreach Done";

    // }
//       return $response;
   }
   */
    public function statusData($response)
    {
      //  dump($response->json('Status'));
      // Get status code from Response.
        $resCode = $response->json('Status');
        if($resCode === 200){
          $rs = $response->json('Response');
       return $rs;
     }else {
       $resCode = $response->json('Status');
       $statusMsg = $response->json('Status_message');

       return $results = array(
         'Status' => $resCode,
         'Status_message' => $statusMsg,
       );
     }
   } // End of public function statusData

   public static function roundOne($round, $data)
   {

     if ($round == 1);
      {
        if (!empty($data['results'])){

          foreach ($data['results'] as $key => $pros)
           {

             $type = 'list-search';

             $singlePros = SELF::packCompany($pros);

             $company = $singlePros[0];
             $uri = $singlePros[1];

             Prospect::emptyCompanyName($company, $uri);
             $vatId = $company['vatId'];
             dump ("Process Round two....");

             $round = 2;
             SELF::roundTwo($round, $vatId);

           }
        }
      }
    }
   public function roundTwo($round, $vatId)
   {
     if ($round == 2);
      {
        dump ("Processing Single Pros Data Per Vat Id..." .$vatId);
        SELF:: perVatID($vatId, $round);
      }
   }
   public function packCompany ($pros)
   {
     $company['name'] = $pros['name'];
     $company['vatId'] = $pros['businessId'];
     $company['registrationDate'] = $pros['registrationDate'];
     $uri = $pros['detailsUri'];

      return $response = array(
        $company,
        $uri
      );
   }

   public function nameIdSearch($company, $uri)
   {

     $response = Prospect::emptyCompanyName($company, $uri);
   }

   public function listSearch()
   {

   }
}  // End of Class
